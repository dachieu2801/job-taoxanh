<div class="mt-10" id="select">
  <label
    id="listbox-label"
    class="block text-sm font-medium leading-6 text-gray-900"
  ></label>
  <div class="relative mt-8">
    <input
      class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6"
      type="text"
      :name="imei"
      id="imei"
      placeholder="Nhập mã IMEI Để tra cứu!!"
      @blur="validateImei"
      @focus="hideErrorMessageImei"
    />
    <p v-if="errorMessageImei" class="text-sm text-left mt-2 ml-4" style="color: red;">{{ errorMessageImei }}</p>
  </div>
  <div class="relative mt-2">
    <button
      type="button"
      @click="toggleDropdown"
      class="relative w-full cursor-default rounded-md bg-white py-1.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 sm:text-sm sm:leading-6"
      aria-haspopup="listbox"
      :aria-expanded="isOpen.toString()"
      aria-labelledby="listbox-label"
    >
      <span class="flex items-center">
        <img
          :src="selectedUser.image"
          alt=""
          class="h-5 w-5 flex-shrink-0 rounded-full"
        />
        <span class="ml-3 block truncate">{{ selectedUser.name }}</span>
      </span>
      <span
        class="pointer-events-none absolute inset-y-0 right-0 ml-3 flex items-center pr-2"
      >
        <svg
          class="h-5 w-5 text-gray-400"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fill-rule="evenodd"
            d="M10.53 3.47a.75.75 0 0 0-1.06 0L6.22 6.72a.75.75 0 0 0 1.06 1.06L10 5.06l2.72 2.72a.75.75 0 1 0 1.06-1.06l-3.25-3.25Zm-4.31 9.81 3.25 3.25a.75.75 0 0 0 1.06 0l3.25-3.25a.75.75 0 1 0-1.06-1.06L10 14.94l-2.72-2.72a.75.75 0 0 0-1.06 1.06Z"
            clip-rule="evenodd"
          />
        </svg>
      </span>
    </button>
    <ul
      v-if="isOpen"
      class="absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
      role="listbox"
      aria-labelledby="listbox-label"
    >
      <li
        v-for="user in users"
        :key="user.id"
        class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900"
        @click="selectUser(user)"
        role="option"
      >
        <div class="flex items-center">
          <img
            :src="user.image"
            alt=""
            class="h-5 w-5 flex-shrink-0 rounded-full"
          />
          <span class="ml-3 block truncate font-normal">{{ user.name }}</span>
        </div>
        <span
          v-if="selectedUser.id === user.id"
          class="absolute inset-y-0 right-0 flex items-center pr-4 text-primary"
        >
          <svg
            class="h-5 w-5"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z"
              clip-rule="evenodd"
            />
          </svg>
        </span>
      </li>
    </ul>
  </div>
  <div class="mt-10 flex items-center justify-center gap-x-6">
    <button
      class="rounded-md bg-primary px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-hover_primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
      @click="openModal"
    >
      CHECK
    </button>
    <a href="#" class="text-sm font-semibold leading-6 text-gray-900"
      >Learn more <span aria-hidden="true">→</span></a
    >
  </div>  
</div>

<script>
  const { createApp } = Vue;
  const app = createApp({
    data() {
      return {
        imei:'',
        isOpen: false,
        errorMessageImei:'',

        users: [
          {
            id: 1,
            name: "Tom Cook",
            image:
              "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
          },
          {
            id: 2,
            name: "Wade Cooper",
            image:
              "https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
          },
          // Add more users as needed
        ],
        selectedUser: {
          id: 1,
          name: "Tom Cook",
          image:
            "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80",
        },
      };
    },
    methods: {
      toggleDropdown() {
        this.isOpen = !this.isOpen;
      },
      selectUser(user) {
        this.selectedUser = user;
        this.isOpen = false;
      },
      openModal() {
        Swal.fire({
          title: "Submit your Github username",
          input: "text",
          inputAttributes: {
            autocapitalize: "off",
          },
          showCancelButton: true,
          confirmButtonText: "Look up",
          showLoaderOnConfirm: true,
          preConfirm: async (login) => {
            try {
              const githubUrl = `
        https://api.github.com/users/${login}
      `;
       const response = await fetch(githubUrl);
              if (!response.ok) {
                return Swal.showValidationMessage(`
          ${JSON.stringify(await response.json())}
        `);
              }
              return response.json();
            } catch (error) {
              Swal.showValidationMessage(`
        Request failed: ${error}
      `);
            }
          },
          allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {
          if (result.isConfirmed) {
            Swal.fire({
              title: `${result.value.login}'s avatar`,
              imageUrl: result.value.avatar_url,
            });
          }
        });
      },
   
      validateImei() {
        const imeiRegex = /^[0-9]{15}$/;
        if (!imeiRegex.test(this.imei)) {
          this.errorMessageImei = 'Please enter a valid IMEI!';
        }
      },
      validateImei(imei) {
        if (!/^[0-9]{15}$/.test(imei)) {
          this.errorMessageImei = 'Please enter a valid IMEI!'
        }
        let sum = 0;
        for (let i = 0; i < 14; i++) {
          let num = parseInt(imei[i]);
          if (i % 2 !== 0) {
            num *= 2;
            if (num > 9) {
              num = Math.floor(num / 10) + (num % 10);
            }
          }
          sum += num;
        }

        return (sum + parseInt(imei[14])) % 10 === 0;
      },
      hideErrorMessageImei() {
        this.errorMessageImei = '';
      },
      
      handleCheckImei() {
        this.validateImei();
        if (!this.errorMessageImei) {
          this.openModal();
        }
      },
    },
  });

  app.mount("#select");
</script>
