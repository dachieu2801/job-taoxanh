<div class="mt-10" id="select">
  <label
    id="listbox-label"
    class="block text-sm font-medium leading-6 text-gray-900"
  ></label>
  <div class="relative mt-8">
    <div class="flex items-center justify-center">
      <input
        class="block w-full h-10 border-0 py-2.5 pl-7 pr-20 rounded-l-md text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6"
        type="text"
        v-model="imei"
        id="imei"
        placeholder="Nhập mã IMEI Để tra cứu!!"
        @blur="validateImei"
        @focus="hideErrorMessage"
      />
      <button
        class="h-10 bg-primary px-3.5 py-2.5 rounded-r-md text-sm font-semibold text-white shadow-sm hover:bg-hover_primary focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary"
        @click="handleCheck"
      >
        CHECK
      </button>
    </div>
    <p v-if="errorMessageImei" class="text-sm text-red-500 mt-2">
      {{ errorMessageImei }}
    </p>
    <div class="relative mt-5">
      <button
        type="button"
        @click="toggleDropdown"
        class="relative w-full cursor-default rounded-md bg-white py-2.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 sm:text-sm sm:leading-6"
        aria-haspopup="listbox"
        :aria-expanded="isOpen.toString()"
        aria-labelledby="listbox-label"
      >
        <span class="flex items-center">
          <!-- <img :src="selectedUser.image" alt="" class="h-5 w-5 flex-shrink-0 rounded-full" /> -->
          <span class="ml-3 block truncate">{{ selectedService.name }}</span>
        </span>
        <span
          class="pointer-events-none absolute inset-y-0 right-0 ml-3 flex items-center pr-2"
        >
          <svg
            class="h-5 w-5 text-gray-400"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fill-rule="evenodd"
              d="M10.53 3.47a.75.75 0 0 0-1.06 0L6.22 6.72a.75.75 0 0 0 1.06 1.06L10 5.06l2.72 2.72a.75.75 0 1 0 1.06-1.06l-3.25-3.25Zm-4.31 9.81 3.25 3.25a.75.75 0 0 0 1.06 0l3.25-3.25a.75.75 0 1 0-1.06-1.06L10 14.94l-2.72-2.72a.75.75 0 0 0-1.06 1.06Z"
              clip-rule="evenodd"
            />
          </svg>
        </span>
      </button>
      <ul
        v-if="isOpen"
        class="absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
        role="listbox"
        aria-labelledby="listbox-label"
      >
        <li
          v-for="service in services"
          :key="service.id"
          class="relative cursor-default select-none py-2 pl-3 pr-9 text-gray-900 hover:text-primary"
          @click="selectService(service)"
          role="option"
        >
          <div class="flex items-center">
            <!-- <img :src="user.image" alt="" class="h-5 w-5 flex-shrink-0 rounded-full" /> -->
            <span class="ml-3 block truncate font-normal">{{
              service?.name
            }}</span>
          </div>
          <span
            v-if="selectedService.code === service.code"
            class="absolute inset-y-0 right-0 flex items-center pr-4 text-primary"
          >
            <svg
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M16.704 4.153a.75.75 0 0 1 .143 1.052l-8 10.5a.75.75 0 0 1-1.127.075l-4.5-4.5a.75.75 0 0 1 1.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 0 1 1.05-.143Z"
                clip-rule="evenodd"
              />
            </svg>
          </span>
        </li>
      </ul>
    </div>
    <div class="mt-5 flex items-center justify-center">
      <label class="block">
        <span class="sr-only">Choose profile photo</span>
        <input
          type="file"
          class="hidden"
          accept=".jpg,.bmp,.png"
          ref="fileInput"
          @change="handleFileUpload"
        />
        <button
          type="button"
          class="file-upload-btn block w-full text-sm file:mr-4 py-2 px-4 rounded-full border-0 font-semibold bg-primary text-white hover:bg-hover_primary cursor-pointer"
          @click="triggerFileInput"
        >
          Lấy IMEI từ hình ảnh
        </button>
      </label>
    </div>
    <p v-if="imeis.length" class="text-sm text-red-500 mt-2">
      {{ JSON.stringify(imeis) }}
    </p>
  </div>

  <div class="mt-10 flex items-center justify-center gap-x-6"></div>

  <div id="form_imei_services" class="hidden">
    <%= JSON.stringify(services) %>
  </div>
</div>

<script>
  const { createApp } = Vue;
  const app = createApp({
    data() {
      return {
        imei: "",
        imeis: [],
        isOpen: false,
        phone: "",
        errorMessageImei: "",
        services: [],
        selectedService: {
          name: "Chọn dịch vụ",
          code: "",
        },
      };
    },
    mounted() {
      this.services = JSON.parse(
        document.getElementById("form_imei_services").innerHTML
      );
    },
    methods: {
      triggerFileInput() {
        this.$refs.fileInput.click(); // Programmatically trigger the file input
      },
      handleFileUpload(event) {
        const img = event.target.files[0];
        this.uploadImage(img);
      },
      async uploadImage(img) {
        if (!img) {
          return;
        }

        const formData = new FormData();
        formData.append("image", img);

        try {
          const response = await fetch("/upload-imeis", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            const errorData = await response.json();
            Swal.fire({
              title: "Quét thất bại",
              icon: "error",
            });
          }

          const data = await response.json();
          if (data.status === "success") {
            this.imeis = data.data;
          } else {
            Swal.fire({
              title: data?.message,
              icon: "error",
            });
          }
        } catch (error) {
          console.error("Error uploading image:", error);
        }
      },
      toggleDropdown() {
        this.isOpen = !this.isOpen;
      },
      selectService(service) {
        this.selectedService = service;
        this.isOpen = false;
      },
      openModalPhone() {
        const seft = this;
        Swal.fire({
          title: "Enter your phone number",
          input: "text",
          inputAttributes: {
            autocapitalize: "off",
          },
          showCancelButton: true,
          confirmButtonText: "Gửi mã OTP",
          showLoaderOnConfirm: true,
          preConfirm: (phone) => seft.sendOtp(phone, seft),
          allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {
          if (result.isConfirmed) {
            Swal.fire({
              title: "Nhập mã OTP ",
              input: "text",
              inputAttributes: {
                autocapitalize: "off",
              },
              showCancelButton: true,
              confirmButtonText: "Xác nhận",
              showLoaderOnConfirm: true,
              preConfirm: async (otp) => {
                const phone = seft.phone;
                const imei = seft.imei;
                const services_code = seft.selectedService.code;

                try {
                  const response = await fetch("/verify-otp", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ otp, phone, imei, services_code }),
                  });

                  if (!response.ok) {
                    return Swal.showValidationMessage(
                      (await response.json()).message ?? ""
                    );
                  }

                  const data = await response.json();
                  if (data.status === "success") {
                    if (result.isConfirmed) {
                      Swal.fire({
                        title: "Xác thực thành công",
                        icon: "success",
                      }).then((result) => {
                        if (result.isConfirmed) {
                          window.location.href = `/checkout/${data.data}`;
                        }
                      });
                    }
                  } else {
                    Swal.showValidationMessage(`${data.message}`);
                  }
                  console.log(data);
                } catch (error) {
                  Swal.showValidationMessage(`Request failed: ${error}`);
                }
              },
              allowOutsideClick: () => !Swal.isLoading(),
            });
          }
        });
      },

      async sendOtp(phone, seft) {
        const phoneRegex = /^0[35789]\d{8}$/;
        if (!phoneRegex.test(phone)) {
          Swal.showValidationMessage(
            "Số điện thoại không hợp lệ! Vui lòng nhập lại."
          );
          return;
        }
        try {
          seft.phone = phone;
          const response = await fetch("/otp", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ phone }),
          });

          if (!response.ok) {
            return Swal.showValidationMessage(
              (await response.json()).message ?? ""
            );
          }
          const data = await response.json();
          console.log(data);
        } catch (error) {
          Swal.showValidationMessage(`Request failed: ${error}`);
        }
      },
      validateImei() {
        let imei = this.imei;
        // Kiểm tra xem IMEI có 15 chữ số không
        if (imei.length === 15 && !/^[0-9]{15}$/.test(imei)) {
          return (this.errorMessageImei = "Mã IMEI không đúng !");
        } else if (imei.length === 14) {
          let sum = 0;
          for (let i = 0; i < 14; i++) {
            let num = parseInt(imei[i], 10);
            if (i % 2 !== 0) {
              num *= 2;
              if (num > 9) {
                num = Math.floor(num / 10) + (num % 10);
              }
            }
            sum += num;
          }

          let lastDigit = (10 - (sum % 10)) % 10;
          imei += lastDigit;

          // Cập nhật lại this.imei với số cuối
          this.imei = imei;
        } else if (imei.length !== 15) {
          return (this.errorMessageImei = "Mã IMEI không đúng !");
        }

        let sum = 0;
        for (let i = 0; i < 14; i++) {
          let num = parseInt(imei[i], 10);
          if (i % 2 !== 0) {
            num *= 2;
            if (num > 9) {
              num = Math.floor(num / 10) + (num % 10);
            }
          }
          sum += num;
        }

        if ((sum + parseInt(imei[14], 10)) % 10 !== 0) {
          return (this.errorMessageImei = "Mã IMEI không đúng !");
        }
      },

      // 353097102371993
      hideErrorMessage() {
        this.errorMessageImei = "";
      },

      handleCheck() {
        if (this.selectedService.code == "") {
          this.errorMessageImei = "Hãy chọn 1 dịch vụ !";
        } else {
          this.errorMessageImei = "";
        }
        this.validateImei();
        if (!this.errorMessageImei) {
          this.openModalPhone();
        }
      },
    },
  });

  app.mount("#select");
</script>
